<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>AutoIt GUI Skeleton</title>
        <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
        <link>https://autoit-gui-skeleton.github.io//</link>
        <description></description>
        <pubDate>Fri, 20 Jul 2018 10:38:15 +0200</pubDate>
        
        <item>
            <title>Check for updates into an AutoIt application with &lt;b&gt;AGS-component-check-for-updates&lt;/b&gt;</title>
            <link>/2018/07/18/ags_component_check-for-updates.html</link>
            <guid isPermaLink="true">/2018/07/18/ags_component_check-for-updates.html</guid>
            <description>&lt;blockquote&gt;
  &lt;p&gt;AGS provides the component &lt;a href=&quot;https://www.npmjs.com/package/@autoit-gui-skeleton/ags-component-check-for-updates&quot;&gt;@autoit-gui-skeleton/ags-component-check-for-updates&lt;/a&gt; in order to add the feature to check for updates to an AutoIt application&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;how-to-install-ags-component-check-for-updates-&quot;&gt;How to install AGS-component-check-for-updates ?&lt;/h1&gt;

&lt;p&gt;We assume that you have already install &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; and &lt;a href=&quot;https://yarnpkg.com/lang/en/&quot;&gt;Yarn&lt;/a&gt;, for example with &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt;, and to install this package AGS-component-http-request, you can use the dependencies manager for AutoIt provides in AGS. So just type in the root folder of your project where the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; is stored:&lt;/p&gt;

&lt;pre class=&quot;command-line&quot; data-prompt=&quot;C: \&amp;gt;&quot;&gt;
&lt;code class=&quot; language-bash&quot;&gt;yarn add @autoit-gui-skeleton/ags-component-check-for-updates --modules-folder vendor&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;All project dependencies, as well as daughter dependencies of parent dependencies, are installed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;./vendor/@autoit-gui-skeleton/&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;All AGS packages hosted in this npmjs repository belong to the organization &lt;a href=&quot;https://www.npmjs.com/search?q=autoit-gui-skeleton&quot;&gt;@autoit-gui-skeleton organization&lt;/a&gt;. Indeed in order to simplify the management of the dependencies of an AutoIt project built with AGS framework, we have diverted form its initial use the dependency manager npm, and its evolution Yarn. This allows us to manage the dependencies of an AGS project with other AutoIt libraries, and to share these AutoIt packages from the npmjs.org repository.&lt;/p&gt;

&lt;h1 id=&quot;how-to-use-ags-component-check-for-updates-&quot;&gt;How to use AGS-component-check-for-updates ?&lt;/h1&gt;

&lt;h2 id=&quot;description&quot;&gt;Description&lt;/h2&gt;

&lt;p&gt;With AGS-component-check-for-updates, you can create an AutoIt application with a feature to check its own updates. It then provides a link to download the latest version of the installer, and another link to the release notes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/autoit-gui-skeleton/ags-component-check-for-updates/master/example/ApplicationWithCheckForUpdates/docs/AGS-component-check-for-updates-update-available.png&quot; alt=&quot;ags-component-check-for-updates :: update available&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To work, it compares the local version of the application installed on the user’s PC with the repository of the published versions of the application. This repository is a json file, &lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASES.json&lt;/code&gt;, which is therefore hosted on a remote server. So we need to connect to the Internet to send an HTTP request to retrieve this file, and we need a JSON parse. This component therefore depends on other AGS components: ags-wrapper-json and ags-component-http-request. If you want to simulate different scenarios ofcheck for updates, you just need to change the value of the application version set in &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/GLOBALS.au3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The remote file &lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASES.json&lt;/code&gt; looks like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ApplicationWithCheckForUpdates&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Example to implementation of AGS-component-check-for-updates&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;homepage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://autoit-gui-skeleton.github.io&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;releases&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;downloadSetup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://myApplication.com/v1.0.0/setup_myApplication_v1.0.0.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;published&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-10-07&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;releaseNotes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://myApplication.com/v1.0.0/README.md&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prototype&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;downloadSetup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;published&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2014-03-21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;releaseNotes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;example-of-an-application-that-implements-ags-component-check-for-updates&quot;&gt;Example of an application that implements AGS-component-check-for-updates&lt;/h2&gt;

&lt;p&gt;Take a look of this example &lt;a href=&quot;https://github.com/autoit-gui-skeleton/AGS-component-check-for-updates/tree/master/example/ApplicationWithCheckForUpdates&quot;&gt;ApplicationWithCheckForUpdates&lt;/a&gt;. This application has interesting features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Check update on startup AutoIt application ;&lt;/li&gt;
  &lt;li&gt;Check update from the menu “? &amp;gt; Check for update” ;&lt;/li&gt;
  &lt;li&gt;Change settings application from the view “Configuration &amp;gt; Settings”. Values are persisted into the configuration file ./config/parameters.ini. In this view, we can set proxy parameters to specify how this application try to connect to internet.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If the option for checking the update of the application at each start is enabled, and if a new version of this application is available, then when the user starts the application, he gives this information in a window child.&lt;/p&gt;

&lt;h2 id=&quot;available-methods&quot;&gt;Available methods&lt;/h2&gt;

&lt;p&gt;This library provides few methods:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Methods&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;json_decode_from_file($filePath)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Decode JSON from a given local file.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;json_decode_from_url($jsonfileUrl, $proxy = &quot;&quot;)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Decode JSON from a given URL.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASES_JSON_get_all_versions($jsonObject)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Parse all defined version(s) persisted in a decoded RELEASES.json file given.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASES_JSON_get_last_version($jsonObject)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Get last version persisted in RELEASES.json&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CheckForUpdates($currentApplicationVersion, $remoteUrlReleasesJson, $proxy = &quot;&quot;)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Compare the current version with the last version persisted in an remote RELEASES.json file, in order to check if an update is available.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_GUI_launch_CheckForUpdates($main_GUI, $context)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Launch a check for updates. The build of a GUI exposing the results depends on the context when the check for update is launch : with an user interaction from menu or on startup application. We store the option to search update on starup in the configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;./config/parameters.ini&lt;/code&gt; in parameter &lt;code class=&quot;highlighter-rouge&quot;&gt;LAUNCH_CHECK_FOR_UPDATE_ON_STARTUP&lt;/code&gt;.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_GUI_build_view_to_CheckForUpdates($main_GUI, $resultCheckForUpdate, $context = &quot;&quot;)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Create a child GUI use to expose the result of a check updater. It exposes if an update of current application is available. The child GUI is related to a given main GUI of application. If this method is execute on startup, we built this child GUI only if an update is available. And when this method is called by a user interaction, we built this child GUI in any case : no update available, new update or experimental.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;configure-the-component-ags-component-check-for-updates&quot;&gt;Configure the component AGS-component-check-for-updates&lt;/h2&gt;

&lt;h3 id=&quot;create-configuration-file-configparametersini&quot;&gt;Create configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;./config/parameters.ini&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;With AGS, you must have the configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;./config/parameters.ini&lt;/code&gt;. This file must not save with control version. You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;./config/parameters.ini.dist&lt;/code&gt; as a “template” of what your parameters.ini file should look like. Set parameters here that may be different on each application. Only this file is save with control version and push on remote server.&lt;/p&gt;

&lt;p&gt;To configure the behavior of this component, you can set its options in this configuration file. You can enable or disable the search of a new update when the application starts, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;LAUNCH_CHECK_FOR_UPDATE_ON_STARTUP&lt;/code&gt; variable of the section &lt;code class=&quot;highlighter-rouge&quot;&gt;AGS_CHECK_FOR_UPDATES&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[AGS_CHECK_FOR_UPDATES]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; [REQUIRED] Enable/disable the search of a new update on start-up.
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;LAUNCH_CHECK_FOR_UPDATE_ON_STARTUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this component we use an another component &lt;a href=&quot;https://www.npmjs.com/package/@autoit-gui-skeleton/ags-component-http-request&quot;&gt;AGS-component-http-request&lt;/a&gt;. This library is used to send HTTP request in GET or POST method, and with or wihtout behind a corporate proxy, in order to get the remote &lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASES.json&lt;/code&gt;. So you can also configure this component. For example, you can set a proxy for all HTTP connections, or set different types of timeouts. By default, this component looks in the configuration file if a proxy is defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PROXY&lt;/code&gt; variable in the &lt;code class=&quot;highlighter-rouge&quot;&gt;AGS_HTTP_REQUEST&lt;/code&gt; section.&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[AGS_HTTP_REQUEST]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; [OPTIONAL] Use a proxy for http connexion or choose NONE to disable it
# PROXY=NONE
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;PROXY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://myProxy.com:20100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;set-constants-in-srcglobalsau3&quot;&gt;Set constants in &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/GLOBALS.au3&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;All constants and global variables are set in one place &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/GLOBALS.au3&lt;/code&gt;, with the exception to global variables of graphic elements which are set in each specific view file. AGS-component-check-for-udpates use the constant &lt;code class=&quot;highlighter-rouge&quot;&gt;$APP_REMOTE_RELEASES_JSON&lt;/code&gt; to specifiy where the repository &lt;code class=&quot;highlighter-rouge&quot;&gt;RELEASES.json&lt;/code&gt; is hosted.&lt;/p&gt;

&lt;p&gt;This json file must be persisted in a remote server available via internet, and without restriction. For example, you can use Github to host this file, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;Global Const $APP_REMOTE_RELEASES_JSON = &quot;https://raw.githubusercontent.com/autoit-gui-skeleton/AGS-component-check-for-updates/master/example/ApplicationWithCheckForUpdates/RELEASES.json&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;how-to-perform-a-check-for-updates-on-startup-&quot;&gt;How to perform a check-for-updates on startup ?&lt;/h3&gt;

&lt;p&gt;In the &lt;code class=&quot;highlighter-rouge&quot;&gt;_main_GUI()&lt;/code&gt; method of the main manager of graphic user interface &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/GUI.au3&lt;/code&gt;, it just add a call to the  method &lt;code class=&quot;highlighter-rouge&quot;&gt;_GUI_launch_CheckForUpdates&lt;/code&gt; like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;;; ./src/GUI.au3 ;;

Func _main_GUI()
	Global $main_GUI = GUICreate($APP_NAME, $APP_WIDTH, $APP_HEIGHT, -1, -1)

	_GUI_Init_Menu()
	_GUI_Init_Footer()
	_GUI_Init_View_Welcome()
	_GUI_Init_View_About()
	_GUI_Init_View_Settings()

	; Set configuration application : icon, background color
	_GUI_Configuration()

	; Show Welcome view on startup
	_GUI_ShowHide_View_Welcome($GUI_SHOW)
	GUISetState(@SW_SHOW)

	; Launch a check for updates on startup, the check is performed 
	; only if LAUNCH_CHECK_FOR_UPDATE_ON_STARTUP is enable in
	; the configuration file './config/parameters.ini'
	_GUI_launch_CheckForUpdates($main_GUI, &quot;ON_STARTUP&quot;)

	; Handle all user interactions and events
	_GUI_HandleEvents()

	GUIDelete()
	Exit
EndFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;how-to-perform-a-check-for-updates-from-an-item-menu-&quot;&gt;How to perform a check-for-updates from an item menu ?&lt;/h3&gt;

&lt;p&gt;Into the &lt;code class=&quot;highlighter-rouge&quot;&gt;GUI_Init_Menu&lt;/code&gt; method, we add a new menu item for check-for-udpates.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;;; ./src/GUI.au3 ;;

Func _GUI_Init_Menu()

    (...)
    
	; Création 'About' menu
	Global $menu_About = GUICtrlCreateMenu(&quot;?&quot;)
	Global $menuitem_Help = GUICtrlCreateMenuItem(&quot;Help&quot;, $menu_About)
	Global $menuitem_CheckForUpdate = GUICtrlCreateMenuItem(&quot;Check for update&quot;, $menu_About)
EndFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we handle events clicks on menu about like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;;; ./src/GUI.au3 ;;

Func _GUI_HandleEvents_Menu_About($msg)
	Switch $msg
		Case $menuitem_Help
			ConsoleWrite('Click on &quot;? &amp;gt; Help&quot;' &amp;amp; @CRLF)
		
		Case $menuitem_CheckForUpdate
			_GUI_launch_CheckForUpdates($main_GUI, &quot;ON_MENU&quot;)
EndFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;user-can-change-the-settings-directly-in-the-application&quot;&gt;user can change the settings directly in the application&lt;/h3&gt;

&lt;p&gt;You can create a view into application in order to change settings. All values are persisted into the configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;./config/parameters.ini&lt;/code&gt;. In this view, we can set proxy parameters to specify how this application try to connect to internet and if the application searchs an update on startup.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/autoit-gui-skeleton/ags-component-check-for-updates/master/example/ApplicationWithCheckForUpdates/docs/AGS-component-check-for-updates-view-settings.png&quot; alt=&quot;AGS-component-check-for-updates :: view settings application&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the user click on save button, it uses the service &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/services/ParametersIni.au3&lt;/code&gt;, which call &lt;code class=&quot;highlighter-rouge&quot;&gt;IniWrite&lt;/code&gt; method on configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;./config/parameters.ini&lt;/code&gt; to persist values.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;;====================================================================================
; Save values choose by user in 'Setting' views, and launch with 'save' button
;
; @params void
; @return void
;====================================================================================
Func _save_parameters_ini()
	; Save proxy settings
	IniWrite($APP_PARAMETERS_INI, &quot;AGS_HTTP_REQUEST&quot;, &quot;PROXY&quot;, GUICtrlRead($input_HTTP_Proxy))
	IniWrite($APP_PARAMETERS_INI, &quot;AGS_HTTP_REQUEST&quot;, &quot;RESOLVE_TIMEOUT&quot;, GUICtrlRead($input_HTTP_Resolve_Timeout))
	IniWrite($APP_PARAMETERS_INI, &quot;AGS_HTTP_REQUEST&quot;, &quot;CONNECT_TIMEOUT&quot;, GUICtrlRead($input_HTTP_Connect_Timeout))
	IniWrite($APP_PARAMETERS_INI, &quot;AGS_HTTP_REQUEST&quot;, &quot;SEND_TIMEOUT&quot;, GUICtrlRead($input_HTTP_Send_Timeout))
	IniWrite($APP_PARAMETERS_INI, &quot;AGS_HTTP_REQUEST&quot;, &quot;RECEIVE_TIMEOUT&quot;, GUICtrlRead($input_HTTP_Receive_Timeout))

	; Startup settings
	If (GUICtrlRead($checkbox_STARTUP_CHECK_UPDATE) = $GUI_CHECKED) Then
		IniWrite($APP_PARAMETERS_INI, &quot;AGS_CHECK_FOR_UPDATES&quot;, &quot;LAUNCH_CHECK_FOR_UPDATE_ON_STARTUP&quot;, &quot;1&quot;)
	Else
		IniWrite($APP_PARAMETERS_INI, &quot;AGS_CHECK_FOR_UPDATES&quot;, &quot;LAUNCH_CHECK_FOR_UPDATE_ON_STARTUP&quot;, &quot;0&quot;)
	EndIf
EndFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the source code of the manager of the “Settings” view.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;;; ./src/views/View_Settings.au3 ;;

#include-once

;====================================================================================
; Create element for the 'Settings' view
;
; @param void
; @return void
;====================================================================================
Func _GUI_Init_View_Settings()
	GUISetFont(20, 800, 0, &quot;Arial Narrow&quot;)
	Global $label_title_settings = GUICtrlCreateLabel(&quot;Settings&quot;, 20, 30, 400)
	GUICtrlSetColor($label_title_settings, 0x85C4ED)
	GUICtrlSetBkColor($label_title_settings, $GUI_BKCOLOR_TRANSPARENT)

	Local $height = 120
	Local $heightStep = 30
	Local $margin_top = 50

	; Proxy settings
	GUISetFont(9, 800, 0, &quot;Arial&quot;)
	Local $height_group_proxy_settings = (5 * $heightStep) + 30
	Global $group_proxy_settings = GUICtrlCreateGroup(&quot; Proxy &quot;, 30, $height - 30, ($APP_WIDTH - 60), $height_group_proxy_settings)
	GUISetFont(9, 400, 0, &quot;Arial&quot;)
	Local $PROXY = IniRead($APP_PARAMETERS_INI, &quot;AGS_HTTP_REQUEST&quot;, &quot;PROXY&quot;, &quot;&quot;)
	Local $RESOLVE_TIMEOUT = Int(IniRead($APP_PARAMETERS_INI, &quot;AGS_HTTP_REQUEST&quot;, &quot;RESOLVE_TIMEOUT&quot;, 0))
	Local $CONNECT_TIMEOUT = Int(IniRead($APP_PARAMETERS_INI, &quot;AGS_HTTP_REQUEST&quot;, &quot;CONNECT_TIMEOUT&quot;, 60000))
	Local $SEND_TIMEOUT = Int(IniRead($APP_PARAMETERS_INI, &quot;AGS_HTTP_REQUEST&quot;, &quot;SEND_TIMEOUT&quot;, 30000))
	Local $RECEIVE_TIMEOUT = Int(IniRead($APP_PARAMETERS_INI, &quot;AGS_HTTP_REQUEST&quot;, &quot;RECEIVE_TIMEOUT&quot;, 30000))
	Global $label_HTTP_Proxy = GUICtrlCreateLabel(&quot;HTTP / HTTPS Proxy&quot;, 50, $height)
	Global $input_HTTP_Proxy = GUICtrlCreateInput($PROXY, 200, $height - 2, 400, 20)
	Global $label_HTTP_Resolve_Timeout = GUICtrlCreateLabel(&quot;Timeout for HTTP resolve&quot;, 50, $height + $heightStep)
	Global $input_HTTP_Resolve_Timeout = GUICtrlCreateInput($RESOLVE_TIMEOUT, 200, $height + $heightStep - 2, 100, 20)
	Global $label_HTTP_Connect_Timeout = GUICtrlCreateLabel(&quot;Timeout for HTTP connect&quot;, 50, $height + 2 * $heightStep)
	Global $input_HTTP_Connect_Timeout = GUICtrlCreateInput($CONNECT_TIMEOUT, 200, $height + 2 * $heightStep - 2, 100, 20)
	Global $label_HTTP_Send_Timeout = GUICtrlCreateLabel(&quot;Timeout for HTTP send&quot;, 50, $height + 3 * $heightStep)
	Global $input_HTTP_Send_Timeout = GUICtrlCreateInput($SEND_TIMEOUT, 200, $height + 3 * $heightStep - 2, 100, 20)
	Global $label_HTTP_Receive_Timeout = GUICtrlCreateLabel(&quot;Timeout for HTTP receive&quot;, 50, $height + 4 * $heightStep)
	Global $input_HTTP_Receive_Timeout = GUICtrlCreateInput($RECEIVE_TIMEOUT, 200, $height + 4 * $heightStep - 2, 100, 20)
	GUICtrlCreateGroup(&quot;&quot;, -1, -1, 1, 1)

	; Startup settings
	$height = $height + $height_group_proxy_settings
	GUISetFont(9, 800, 0, &quot;Arial&quot;)
	Global $group_startup_settings = GUICtrlCreateGroup(&quot; Start-up &quot;, 30, $height, ($APP_WIDTH - 60), (1 * $heightStep) + 30)
	GUISetFont(9, 400, 0, &quot;Arial&quot;)
	Global $checkbox_STARTUP_CHECK_UPDATE = GUICtrlCreateCheckbox( _
			&quot;Search update on application startup ?&quot;, _
			50, $height + $heightStep, Default, 20, $BS_RIGHTBUTTON _
			)
	Local $LAUNCH_CHECK_FOR_UPDATE_ON_STARTUP = Int(IniRead($APP_PARAMETERS_INI, &quot;AGS_CHECK_FOR_UPDATES&quot;, &quot;LAUNCH_CHECK_FOR_UPDATE_ON_STARTUP&quot;, &quot;NotFound&quot;))
	If ($LAUNCH_CHECK_FOR_UPDATE_ON_STARTUP = 1) Then
		GUICtrlSetState($checkbox_STARTUP_CHECK_UPDATE, $GUI_CHECKED)
	Else
		GUICtrlSetState($checkbox_STARTUP_CHECK_UPDATE, $GUI_UNCHECKED)
	EndIf
	GUICtrlCreateGroup(&quot;&quot;, -1, -1, 1, 1)

	Global $button_save_settings = GUICtrlCreateButton(&quot;Save&quot;, ($APP_WIDTH - 150) / 2, $APP_HEIGHT - 100, 150)

	; Setter of tips and cursors
	_GUI_SetCursorAndTip_View_Settings()

	; Hide all elements by default
	_GUI_ShowHide_View_Settings($GUI_HIDE)
EndFunc


;====================================================================================
; Setter tips and cursor for elements in 'Settings' view
;
; @param void
; @return void
;====================================================================================
Func _GUI_SetCursorAndTip_View_Settings()
	GUICtrlSetCursor($label_HTTP_Proxy, 4)
	GUICtrlSetTip($label_HTTP_Proxy, @CRLF &amp;amp; &quot;Configuration of proxy to allow internet connection&quot; &amp;amp; @CRLF &amp;amp; @CRLF &amp;amp; &quot;Example : http(s):\\myProxy.com:8080&quot;, &quot;HTTP/HTTPS Proxy&quot;, 1)

	GUICtrlSetCursor($checkbox_STARTUP_CHECK_UPDATE, 4)
	GUICtrlSetTip($checkbox_STARTUP_CHECK_UPDATE, @CRLF &amp;amp; &quot;To allow the search of an update of the application at each start.&quot; &amp;amp; @CRLF &amp;amp; &quot;This search requires an internet connection, and therefore&quot; &amp;amp; @CRLF &amp;amp; &quot;potenially need a configuration of a proxy.&quot;, &quot;Check for update on start-up&quot;, 1)

	GUICtrlSetCursor($button_save_settings, 0)
EndFunc


;====================================================================================
; Handler for display element on 'Settings' view
;
; @param {int} $action, use GUIConstantsEx $GUI_SHOW or $GUI_HIDE
; @return void
;====================================================================================
Func _GUI_ShowHide_View_Settings($action)
	Switch $action
		Case $GUI_SHOW
			_GUI_Hide_all_view()
			; Define here all elements to show when user come into this view
			GUICtrlSetState($label_title_settings, $GUI_SHOW)
			GUICtrlSetState($group_proxy_settings, $GUI_SHOW)
			GUICtrlSetState($label_HTTP_Proxy, $GUI_SHOW)
			GUICtrlSetState($input_HTTP_Proxy, $GUI_SHOW)
			GUICtrlSetState($label_HTTP_Resolve_Timeout, $GUI_SHOW)
			GUICtrlSetState($input_HTTP_Resolve_Timeout, $GUI_SHOW)
			GUICtrlSetState($label_HTTP_Connect_Timeout, $GUI_SHOW)
			GUICtrlSetState($input_HTTP_Connect_Timeout, $GUI_SHOW)
			GUICtrlSetState($label_HTTP_Send_Timeout, $GUI_SHOW)
			GUICtrlSetState($input_HTTP_Send_Timeout, $GUI_SHOW)
			GUICtrlSetState($label_HTTP_Receive_Timeout, $GUI_SHOW)
			GUICtrlSetState($input_HTTP_Receive_Timeout, $GUI_SHOW)
			GUICtrlSetState($group_startup_settings, $GUI_SHOW)
			GUICtrlSetState($checkbox_STARTUP_CHECK_UPDATE, $GUI_SHOW)
			GUICtrlSetState($button_save_settings, $GUI_SHOW)

		Case $GUI_HIDE
			; Define here all elements to hide when user leave this view
			GUICtrlSetState($label_title_settings, $GUI_HIDE)
			GUICtrlSetState($group_proxy_settings, $GUI_HIDE)
			GUICtrlSetState($label_HTTP_Proxy, $GUI_HIDE)
			GUICtrlSetState($input_HTTP_Proxy, $GUI_HIDE)
			GUICtrlSetState($label_HTTP_Resolve_Timeout, $GUI_HIDE)
			GUICtrlSetState($input_HTTP_Resolve_Timeout, $GUI_HIDE)
			GUICtrlSetState($label_HTTP_Connect_Timeout, $GUI_HIDE)
			GUICtrlSetState($input_HTTP_Connect_Timeout, $GUI_HIDE)
			GUICtrlSetState($label_HTTP_Send_Timeout, $GUI_HIDE)
			GUICtrlSetState($input_HTTP_Send_Timeout, $GUI_HIDE)
			GUICtrlSetState($label_HTTP_Receive_Timeout, $GUI_HIDE)
			GUICtrlSetState($input_HTTP_Receive_Timeout, $GUI_HIDE)
			GUICtrlSetState($group_startup_settings, $GUI_HIDE)
			GUICtrlSetState($checkbox_STARTUP_CHECK_UPDATE, $GUI_HIDE)
			GUICtrlSetState($button_save_settings, $GUI_HIDE)

	EndSwitch
EndFunc


;====================================================================================
; Handler for events in 'Settings' view
;
; @param $msg, event return with GUIGetMsg method, i.e. the control ID of the control sending the message
; @return @void
;====================================================================================
Func _GUI_HandleEvents_View_Settings($msg)
	Switch $msg
		Case $button_save_settings
			ConsoleWrite('Click on &quot;$button_save_settings&quot;' &amp;amp; @CRLF)
			_save_parameters_ini()
	EndSwitch
EndFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;how-to-test-differents-case-with-the-check-for-updates&quot;&gt;How to test differents case with the check-for-updates&lt;/h3&gt;

&lt;p&gt;In this example of remote RELEASES.json, we set two releases like this:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ApplicationWithCheckForUpdates&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Example to implementation of AGS-component-check-for-updates&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MIT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;homepage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://autoit-gui-skeleton.github.io&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;releases&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;stable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;downloadSetup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://myApplication.com/v1.0.0/setup_myApplication_v1.0.0.exe&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;published&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-10-07&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;releaseNotes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://myApplication.com/v1.0.0/README.md&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.9.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;prototype&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;downloadSetup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;published&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2014-03-21&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;releaseNotes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;undefined&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you want to simulate different scenarios on check updater, you just need to change the value of the application version set in &lt;code class=&quot;highlighter-rouge&quot;&gt;./src/GLOBALS.au3&lt;/code&gt;. For example to simulate the case of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;new version available set it to : &lt;code class=&quot;highlighter-rouge&quot;&gt;Global Const $APP_VERSION = &quot;0.9.0&quot;&lt;/code&gt; &lt;br /&gt;&lt;br /&gt;&lt;img src=&quot;https://raw.githubusercontent.com/autoit-gui-skeleton/ags-component-check-for-updates/master/example/ApplicationWithCheckForUpdates/docs/AGS-component-check-for-updates-update-available.png&quot; alt=&quot;ags-component-check-for-updates :: update available&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;application have not update available : &lt;code class=&quot;highlighter-rouge&quot;&gt;Global Const $APP_VERSION = &quot;1.0.0&quot;&lt;/code&gt; &lt;br /&gt;&lt;br /&gt; &lt;img src=&quot;https://raw.githubusercontent.com/autoit-gui-skeleton/ags-component-check-for-updates/master/example/ApplicationWithCheckForUpdates/docs/AGS-component-check-for-updates-no-update-available.png&quot; alt=&quot;AGS-component-check-for-updates :: no update available&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;application is experimental: &lt;code class=&quot;highlighter-rouge&quot;&gt;Global Const $APP_VERSION = &quot;1.1.0&quot;&lt;/code&gt; &lt;br /&gt;&lt;br /&gt;
 &lt;img src=&quot;https://raw.githubusercontent.com/autoit-gui-skeleton/ags-component-check-for-updates/master/example/ApplicationWithCheckForUpdates/docs/AGS-component-check-for-updates-experimental.png&quot; alt=&quot;AGS-component-check-for-updates :: experimental version&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Continue reading ?&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://autoit-gui-skeleton.github.io//documentation/getting-started#dependencies-manager-for-autoit&quot;&gt;Dependencies manager for AutoIt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
            <pubDate>Wed, 18 Jul 2018 00:00:00 +0200</pubDate>
        </item>
        
        <item>
            <title>Send HTTP request in AutoIt with &lt;b&gt;AGS-component-http-request&lt;/b&gt;</title>
            <link>/2018/07/17/ags_component_http_request.html</link>
            <guid isPermaLink="true">/2018/07/17/ags_component_http_request.html</guid>
            <description>&lt;blockquote&gt;
  &lt;p&gt;In order to send HTTP request, AGS provides this component &lt;a href=&quot;https://www.npmjs.com/package/@autoit-gui-skeleton/ags-component-http-request&quot;&gt;@autoit-gui-skeleton/ags-component-http-request&lt;/a&gt;. This library is used to send HTTP request in GET or POST method, and with or wihtout behind a corporate proxy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;how-to-install-ags-component-http-request-&quot;&gt;How to install AGS-component-http-request ?&lt;/h1&gt;

&lt;p&gt;We assume that you have already install &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; and &lt;a href=&quot;https://yarnpkg.com/lang/en/&quot;&gt;Yarn&lt;/a&gt;, for example with &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt;, and to install this package AGS-component-http-request, you can use the dependencies manager for AutoIt provides in AGS. So just type in the root folder of your project where the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; is stored:&lt;/p&gt;

&lt;pre class=&quot;command-line&quot; data-prompt=&quot;C: \&amp;gt;&quot;&gt;
&lt;code class=&quot; language-bash&quot;&gt;yarn add @autoit-gui-skeleton/ags-component-http-request --modules-folder vendor&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;All project dependencies, as well as daughter dependencies of parent dependencies, are installed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;./vendor/@autoit-gui-skeleton/&lt;/code&gt; directory. To use it in your AutoIt program, you need to include this library with this instruction:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;#include 'vendor/@autoit-gui-skeleton/ags-component-http-request/ags-component-http-request.au3'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All AGS packages hosted in this npmjs repository belong to the organization &lt;a href=&quot;https://www.npmjs.com/search?q=autoit-gui-skeleton&quot;&gt;@autoit-gui-skeleton organization&lt;/a&gt;. Indeed in order to simplify the management of the dependencies of an AutoIt project built with AGS framework, we have diverted form its initial use the dependency manager npm, and its evolution Yarn. This allows us to manage the dependencies of an AGS project with other AutoIt libraries, and to share these AutoIt packages from the npmjs.org repository.&lt;/p&gt;

&lt;h1 id=&quot;how-to-use-ags-component-http-request-&quot;&gt;How to use AGS-component-http-request ?&lt;/h1&gt;

&lt;h2 id=&quot;available-methods&quot;&gt;Available methods&lt;/h2&gt;

&lt;p&gt;This library provides severals methods to deal with HTTP requests.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Methods&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpGET($url, $data = &quot;&quot;, $proxy = &quot;&quot;)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Send HTTP request with GET method.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpPOST($url, $data = &quot;&quot;, $proxy = &quot;&quot;)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Send HTTP request with POST method.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;URLEncode($urlText)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;URL encoding replaces unsafe ASCII characters.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;URLDecode($urlText)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Inverse operation of URLEncode.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WinHttp_SetProxy_from_configuration_file($oHttp)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Set timeouts by parsing the configuration file AGS project store in ‘./config/parameters.ini’.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WinHttp_SetProxy_from_configuration_file($oHttp)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Set proxy by parsing the configuration file AGS project store in ‘./config/parameters.ini’.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;configure-the-ags-component-http-request-component&quot;&gt;Configure the AGS-component-http-request component&lt;/h2&gt;

&lt;p&gt;To configure the behavior of this component, you can set its options in the &lt;code class=&quot;highlighter-rouge&quot;&gt;./config/parameters.ini&lt;/code&gt; file. For example, you can set a proxy for all HTTP connections, or set different types of timeouts. By default, this component looks in the configuration file if a proxy is defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PROXY&lt;/code&gt; variable in the &lt;code class=&quot;highlighter-rouge&quot;&gt;AGS_HTTP_REQUEST&lt;/code&gt; section.&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;## ./config/parameters.ini ##
&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;[AGS_HTTP_REQUEST]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;; [OPTIONAL] Use a proxy for http connexion. Keep empty to disable it.
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;PROXY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http:/myproxy.com:20100&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; [OPTIONAL] Time-out value applied when resolving a host name to an @IP,
; in miliseconds.
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;RESOLVE_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1000&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; [OPTIONAL] Time-out value applied when establishing a communication socket
; with the target server, in milliseconds.
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;CONNECT_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1000&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; [OPTIONAL] Time-out value applied when sending an individual packet of request
; data on the communication socket to the target server, in milliseconds. A
; large request sent to an HTTP server are normally be broken up into multiple
; packets. The send time-out applies to sending each packet individually.
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;SEND_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1000&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;; [OPTIONAL] Time-out value applied when receiving a packet of response data
; from the target server, in milliseconds. Large responses are be broken up into
; multiple packets; the receive time-out applies to fetching each packet of data
; off the socket.
&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;RECEIVE_TIMEOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;how-to-send-http-request-by-using-get-method-&quot;&gt;How to send HTTP request by using GET method ?&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;Local $response = HttpGET(&quot;https://soundcloud.com/2080/my-megadrive&quot;)
    
ConsoleWrite($response.Status &amp;amp; @CRLF)
ConsoleWrite($response.ResponseText)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;how-to-send-http-request-behind-a-corporate-proxy-&quot;&gt;How to send HTTP request behind a corporate proxy ?&lt;/h2&gt;

&lt;p&gt;By default this component search in the configuration file &lt;code class=&quot;highlighter-rouge&quot;&gt;./config/parameters.ini&lt;/code&gt; if a proxy is defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;PROXY&lt;/code&gt; variable of the section &lt;code class=&quot;highlighter-rouge&quot;&gt;AGS_HTTP_REQUEST&lt;/code&gt;. But you can also provide a proxy directly in the method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;Local $response = HttpGET( _ 
    &quot;https://soundcloud.com/2080/my-megadrive&quot;, _ 
    default, _ 
    &quot;http://myproxy.com:20100&quot;)
    
ConsoleWrite($response.Status &amp;amp; @CRLF)
ConsoleWrite($response.ResponseText)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;how-to-url-encode-a-string-&quot;&gt;How to URL encode a string ?&lt;/h2&gt;

&lt;p&gt;URL encoding is a mechanism for encoding information in a Uniform Resource Identifier (URI). It is used in the preparation of data of the application/x-www-form-urlencoded media type, and in the submission of HTML form data in HTTP requests.&lt;/p&gt;

&lt;p&gt;If you use HttpGET, you must clean the data to be sent with this method in advance.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;Local $msg = &quot;Welcome in AGS&quot;
Local $url = &quot;https://myServer.org/foo?msg=&quot; &amp;amp; URLEncode($msg) &amp;amp; &quot;&amp;amp;param=32&quot;

ConsoleWrite($url)
; Output &amp;gt;&amp;gt; https://myServer.org/foo?msg=Welcome%20in%20AGS&amp;amp;param=32

ConsoleWrite(URLEncode(&quot;123abc!@#$%^&amp;amp;*()_+ &quot;) &amp;amp; @crlf)
; Output &amp;gt;&amp;gt; 123abc!%40%23%24%25%5E%26*()_%2B%20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Continue reading ?&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://autoit-gui-skeleton.github.io//documentation/getting-started#dependencies-manager-for-autoit&quot;&gt;Dependencies manager for AutoIt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
            <pubDate>Tue, 17 Jul 2018 00:00:00 +0200</pubDate>
        </item>
        
        <item>
            <title>Use JSON files in AutoIt with &lt;b&gt;AGS-wrapper-json&lt;/b&gt;</title>
            <link>/2018/07/16/ags_wrapper_json.html</link>
            <guid isPermaLink="true">/2018/07/16/ags_wrapper_json.html</guid>
            <description>&lt;blockquote&gt;
  &lt;p&gt;In order to work with JSON, AGS provides a &lt;em&gt;wrapper&lt;/em&gt; &lt;a href=&quot;https://www.npmjs.com/package/@autoit-gui-skeleton/ags-wrapper-json&quot;&gt;@autoit-gui-skeleton/ags-wrapper-json&lt;/a&gt; of the library JSON.au3, created by Ward. This library allows us to decode/encode JSON with the minimalistic JSON parser &lt;a href=&quot;https://zserge.com/jsmn.html&quot;&gt;jsmn&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;how-to-install-ags-wrapper-json-&quot;&gt;How to install AGS-wrapper-json ?&lt;/h1&gt;

&lt;p&gt;We assume that you have already install &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; and &lt;a href=&quot;https://yarnpkg.com/lang/en/&quot;&gt;Yarn&lt;/a&gt;, for example with &lt;a href=&quot;https://chocolatey.org/&quot;&gt;Chocolatey&lt;/a&gt;, and to install this package AGS-wrapper-json, you can use the dependencies manager for AutoIt provides in AGS. So just type in the root folder of your project where the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; is stored:&lt;/p&gt;

&lt;pre class=&quot;command-line&quot; data-prompt=&quot;C: \&amp;gt;&quot;&gt;
&lt;code class=&quot; language-bash&quot;&gt;yarn add @autoit-gui-skeleton/ags-wrapper-json --modules-folder vendor&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;All project dependencies, as well as daughter dependencies of parent dependencies, are installed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;./vendor/@autoit-gui-skeleton/&lt;/code&gt; directory. To use it in your AutoIt program, you need to include this library with this instruction:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;#include 'vendor/@autoit-gui-skeleton/ags-wrapper-json/JSON.au3'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All AGS packages hosted in this npmjs repository belong to the organization &lt;a href=&quot;https://www.npmjs.com/search?q=autoit-gui-skeleton&quot;&gt;@autoit-gui-skeleton organization&lt;/a&gt;. Indeed in order to simplify the management of the dependencies of an AutoIt project built with AGS framework, we have diverted form its initial use the dependency manager npm, and its evolution Yarn. This allows us to manage the dependencies of an AGS project with other AutoIt libraries, and to share these AutoIt packages from the npmjs.org repository.&lt;/p&gt;

&lt;h1 id=&quot;how-to-decode-a-json-&quot;&gt;How to decode a JSON ?&lt;/h1&gt;

&lt;h2 id=&quot;decode-a-json-file-from-local&quot;&gt;Decode a JSON file from local&lt;/h2&gt;

&lt;p&gt;For example, create this json file in your &lt;code class=&quot;highlighter-rouge&quot;&gt;./assets/DROIDS.json&lt;/code&gt; folder of your AGS project.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;project&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Listing droids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Luke&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;luke@2080.org&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;droids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;R2D2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Astromecano&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0,96m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BB8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Astromecano&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0,67m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C-3PO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Social&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1,67m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To decode this local file, we use this bellow function &lt;code class=&quot;highlighter-rouge&quot;&gt;json_decode_from_file&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;#include 'vendor/@autoit-gui-skeleton/ags-wrapper-json/JSON.au3'

;====================================================================================
; Decode JSON from a given local file
;
; @param $jsonfilePath (string)
; @return $object (object), instance return by json_decode
;====================================================================================
Func json_decode_from_file($filePath)
	Local $fileOpen, $fileContent, $object

	$fileOpen = FileOpen($filePath, $FO_READ)
	If $fileOpen = -1 Then
		Return SetError(1, 0, &quot;An error occurred when reading the file &quot; &amp;amp; $filePath)
	EndIf
	$fileContent = FileRead($fileOpen)
	FileClose($fileOpen)
	$object = Json_Decode($fileContent)

	Return $object
EndFunc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to Ward’s documentation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The most JSON data type will be decoded into corresponding AutoIt variable, including 1D array, string, number, true, false, and null. JSON object will be decoded into “Windows Scripting Dictionary Object” retuned from &lt;code class=&quot;highlighter-rouge&quot;&gt;ObjCreate(&quot;Scripting.Dictionary&quot;)&lt;/code&gt;. AutoIt build-in functions like IsArray, IsBool, etc. can be used to check the returned data type. But for Object and Null, Json_IsObject() and Json_IsNull() should be used.&lt;/p&gt;

  &lt;p&gt;If the input JSON string is invalid, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Error&lt;/code&gt; will be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;$JSMN_ERROR_INVAL&lt;/code&gt;. And if the input JSON string is not finish, &lt;code class=&quot;highlighter-rouge&quot;&gt;@Error&lt;/code&gt; will be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;$JSMN_ERROR_PART&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;get-values-from-a-json-object&quot;&gt;Get values from a json object&lt;/h2&gt;

&lt;p&gt;To work with &lt;code class=&quot;highlighter-rouge&quot;&gt;$jsonObject&lt;/code&gt;, the return of &lt;code class=&quot;highlighter-rouge&quot;&gt;json_decode_from_file&lt;/code&gt;, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Json_Get&lt;/code&gt; function. To select a JSON variable, both dot notation and square bracket notation can be supported.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;Local $file = @ScriptDir &amp;amp; &quot;\assets\DROIDS.json&quot;
Local $jsonObject = json_decode_from_file($file)

; With dot notation
Local $project = Json_Get($jsonObject, '.project')     ; Listing droids
Local $name = Json_Get($jsonObject, '.author.name')    ; Luke
Local $mail = Json_Get($jsonObject, '.author.mail')    ; luke@2080.org
local $test = Json_Get($jsonObject, '.droids[1].name') ; BB8

; With array notation
Local $project2 = Json_Get($jsonObject, '[&quot;project&quot;]')
Local $name2 = Json_Get($jsonObject, '[&quot;author&quot;][&quot;name&quot;]')
Local $mail2 = Json_Get($jsonObject, '[&quot;author&quot;][&quot;mail&quot;]')
local $test2 = Json_Get($jsonObject, '[&quot;droids&quot;][1][&quot;name&quot;]')
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You also can use object help functions. These functions are just warps of &lt;code class=&quot;highlighter-rouge&quot;&gt;Scripting.Dictionary&lt;/code&gt; COM object.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Json_ObjCreate()&lt;/li&gt;
  &lt;li&gt;Json_ObjPut(ByRef $Object, $Key, $Value)&lt;/li&gt;
  &lt;li&gt;Json_ObjGet(ByRef $Object, $Key)&lt;/li&gt;
  &lt;li&gt;Json_ObjDelete(ByRef $Object, $Key)&lt;/li&gt;
  &lt;li&gt;Json_ObjExists(ByRef $Object, $Key)&lt;/li&gt;
  &lt;li&gt;Json_ObjGetCount(ByRef $Object)&lt;/li&gt;
  &lt;li&gt;Json_ObjGetKeys(ByRef $Object)&lt;/li&gt;
  &lt;li&gt;Json_ObjClear(ByRef $Object)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;work-with-an-object-collection-and-iterate-its-items&quot;&gt;Work with an object collection, and iterate its items&lt;/h2&gt;

&lt;p&gt;To iterate values from an array json&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;Local $file = @ScriptDir &amp;amp; &quot;\assets\DROIDS.json&quot;
Local $jsonObject = json_decode_from_file($file)

; Check if exists an item droid into the collection `droids`
Local $droids = Json_Get($jsonObject, '.droids')
If UBound($droids) = 0 Then
    Return SetError(3, 0, &quot;Array attribute 'droids' is empty.&quot;)
EndIf

; Iterate items collection to store values into an array 
Local $array[UBound($droids)][3]
For $i = 0 To UBound($droids) - 1 Step 1
    $array[$i][0] = Json_Get($jsonObject, '.droids' &amp;amp; '[' &amp;amp; $i &amp;amp; '].name')
    $array[$i][1] = Json_Get($jsonObject, '.droids' &amp;amp; '[' &amp;amp; $i &amp;amp; '].type')
    $array[$i][2] = Json_Get($jsonObject, '.droids' &amp;amp; '[' &amp;amp; $i &amp;amp; '].size')
Next
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;add-object-into-a-json&quot;&gt;Add object into a JSON&lt;/h2&gt;

&lt;p&gt;You can do it with &lt;code class=&quot;highlighter-rouge&quot;&gt;Json_Put&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-àutoit&quot;&gt;Local $Obj
Json_Put($Obj, &quot;.foo&quot;, &quot;foo&quot;)
Json_Put($Obj, &quot;.bar[0]&quot;, &quot;bar&quot;)
Json_Put($Obj, &quot;.test[1].foo.bar[2].foo.bar&quot;, &quot;Test&quot;)

Local $Test = Json_Get($Obj, '[&quot;test&quot;][1][&quot;foo&quot;][&quot;bar&quot;][2][&quot;foo&quot;][&quot;bar&quot;]') ; &quot;Test&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;decode-a-json-file-from-a-remote-server&quot;&gt;Decode a JSON file from a remote server&lt;/h2&gt;

&lt;p&gt;To decode a JSON file hosted on a remote server, or built from a webservice or from a REST API, you can use the component &lt;a href=&quot;https://www.npmjs.com/package/@autoit-gui-skeleton/ags-component-http-request&quot;&gt;@autoit-gui-skeleton/ags-component-http-request&lt;/a&gt; to make HTTP requests to a given URL.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;#include 'vendor/@autoit-gui-skeleton/ags-component-http-request/ags-component-http-request.au3'

;====================================================================================
; Decode JSON from a given URL
;
; @param $jsonfileUrl (string)
; @param $proxy (string), by default we load proxy settings form configuration file
; @return $object (object), instance return by json_decode
;====================================================================================
Func json_decode_from_url($jsonfileUrl, $proxy = &quot;&quot;)
	Local $response = HttpGET($jsonfileUrl, Default, $proxy)
	If (@error) Then
		Return SetError(@error, $response, _ 
		    &quot;Unable to get json file on server &quot; &amp;amp; $jsonfileUrl &amp;amp; &quot;.&quot;)
	EndIf
	Local $data = $response.ResponseText
	Local $object = json_decode($data)

	Return $object
EndFunc

Local $jsonObject = json_decode_from_url(https://api.spacexdata.com/v2/info)

Local $name = Json_Get($jsonObject, '.name')        ; SpaceX
Local $founder = Json_Get($jsonObject, '.founder')  ; Elon Musk
Local $founded = Json_Get($jsonObject, '.founded')  ; 2002
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;how-to-encode-a-json-&quot;&gt;How to encode a JSON ?&lt;/h1&gt;

&lt;p&gt;According to Ward’s documentation, you can use &lt;code class=&quot;highlighter-rouge&quot;&gt;Json_Encode($Data, $Option = 0, $Indent = &quot;\t&quot;, $ArraySep = &quot;,\r\n&quot;, $ObjectSep = &quot;,\r\n&quot;, $ColonSep = &quot;: &quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$Data&lt;/code&gt; can be a string, number, bool, keyword : default or null, 1D array, or &lt;code class=&quot;highlighter-rouge&quot;&gt;Scripting.Dictionary&lt;/code&gt; COM object.&lt;/li&gt;
    &lt;li&gt;Binary will be converted to string in UTF8 encoding.&lt;/li&gt;
    &lt;li&gt;Ptr will be converted to number&lt;/li&gt;
    &lt;li&gt;Other unsupported types like 2D array, dllstruct or object will be encoded into null.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$Option&lt;/code&gt; is bitmask consisting following constant:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_UNESCAPED_ASCII&lt;/code&gt; ; Don’t escape ascii charcters between chr(1) ~ chr(0x1f)&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_UNESCAPED_UNICODE&lt;/code&gt; ; Encode multibyte Unicode characters literally&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_UNESCAPED_SLASHES&lt;/code&gt; ; Don’t escape /&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_HEX_TAG&lt;/code&gt; ; All &amp;lt; and &amp;gt; are converted to \u003C and \u003E&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_HEX_AMP&lt;/code&gt; ; All &amp;amp;amp;amp;amp;s are converted to \u0026&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_HEX_APOS&lt;/code&gt; ; All ‘ are converted to \u0027&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_HEX_QUOT&lt;/code&gt; ; All “ are converted to \u0022&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_PRETTY_PRINT&lt;/code&gt; ; Use whitespace in returned data to format it&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_STRICT_PRINT&lt;/code&gt; ; Make sure returned JSON string is RFC4627 compliant&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_UNQUOTED_STRING&lt;/code&gt; ; Output unquoted string if possible (conflicting with $JSMN_STRICT_PRINT)&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example to encode in JSON:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-autoit&quot;&gt;Local $file = @ScriptDir &amp;amp; &quot;\assets\DROIDS.json&quot;
Local $jsonObject = json_decode_from_file($file)
Local $jsonEncoded = Json_Encode($jsonObject, $JSON_PRETTY_PRINT)

ConsoleWrite($jsonEncoded)
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most encoding option have the same means like PHP’s json_encode() function. When &lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_PRETTY_PRINT&lt;/code&gt; is set, output format can be change by other 4 parameters : &lt;code class=&quot;highlighter-rouge&quot;&gt;($Indent, $ArraySep, $ObjectSep, $ColonSep)&lt;/code&gt;. Because these 4 output format parameters will be checked inside &lt;code class=&quot;highlighter-rouge&quot;&gt;Jsmn_Encode()&lt;/code&gt; function, returned string will be always accepted by &lt;code class=&quot;highlighter-rouge&quot;&gt;Jsmn_Decode()&lt;/code&gt;. $JSON_UNQUOTED_STRING can be used to output unquoted string that also accetped by Jsmn_Decode(). &lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_STRICT_PRINT&lt;/code&gt; is used to check output format setting and avoid non-standard JSON output. So this option is conflicting with &lt;code class=&quot;highlighter-rouge&quot;&gt;$JSON_UNQUOTED_STRING&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Continue reading ?&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.autoitscript.com/forum/topic/148114-a-non-strict-json-udf-jsmn/&quot;&gt;https://www.autoitscript.com/forum/topic/148114-a-non-strict-json-udf-jsmn/&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://autoit-gui-skeleton.github.io//documentation/getting-started#dependencies-manager-for-autoit&quot;&gt;Dependencies manager for AutoIt&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
            <pubDate>Mon, 16 Jul 2018 00:00:00 +0200</pubDate>
        </item>
        
        <item>
            <title>AGS provides a fast dependencies manager for AutoIt with Yarn.</title>
            <link>/2018/07/10/ags_dependencies_manager_for_AutoIt.html</link>
            <guid isPermaLink="true">/2018/07/10/ags_dependencies_manager_for_AutoIt.html</guid>
            <description>&lt;blockquote&gt;
  &lt;p&gt;In order to simplify the management of the dependencies of an AutoIt project built with AGS, we have diverted form its initial use the dependency manager npm, and its evolution Yarn. This allows us to manage the dependencies of an AGS project with other AutoIt libraries, and to share these AutoIt packages from the npmjs.org repository.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;dependency-manager-for-autoit&quot;&gt;Dependency manager for AutoIt&lt;/h1&gt;

&lt;p&gt;What is a dependency? A Dependency is an external and standalone package (library) which have one or more files that performs a specific task. Dependency managers are software modules that coordinate the integration of external libraries or packages into larger application stack. Dependency managers use a configuration files to describe the project and its dependencies.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://autoit-gui-skeleton.github.io//assets/img/autoit_yarn.jpg&quot; alt=&quot;AGS dependency manager AutoIt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AGS uses the Node.js ecosystem and its dependency manager npm and Yarn.&lt;/p&gt;

&lt;h2 id=&quot;package-ags--component-ou-wrapper&quot;&gt;Package AGS : &lt;em&gt;component&lt;/em&gt; ou &lt;em&gt;wrapper&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;All AGS packages hosted in npmjs.org repository belong to the &lt;a href=&quot;https://www.npmjs.com/search?q=autoit-gui-skeleton&quot;&gt;@autoit-gui-skeleton&lt;/a&gt; organization. And you can find two types of package hosted in this organization:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An &lt;strong&gt;AGS-component&lt;/strong&gt; is an AutoIt library, that you can easy use in your AutoIt project built with the AGS framework. Take a look of &lt;a href=&quot;https://www.npmjs.com/package/@autoit-gui-skeleton/ags-component-http-request&quot;&gt;AGS-component http-request&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;An &lt;strong&gt;AGS-wrapper&lt;/strong&gt; is a simple wrapper for an another library created by another team/developper. Take a look of &lt;a href=&quot;https://www.npmjs.com/package/@autoit-gui-skeleton/ags-wrapper-json&quot;&gt;AGS-wrapper-json&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-install-an-ags-package-&quot;&gt;How to install an AGS package ?&lt;/h2&gt;

&lt;p&gt;To install an AGS component or wrapper in your project, just type in the root folder where the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; is stored:&lt;/p&gt;

&lt;pre class=&quot;command-line&quot; data-prompt=&quot;C: \MyProject\&amp;gt;&quot;&gt;
&lt;code class=&quot; language-bash&quot;&gt;yarn add @autoit-gui-skeleton/ags-component-xxx --modules-folder vendor
yarn add @autoit-gui-skeleton/ags-wrapper-xxx --modules-folder vendor&lt;/code&gt;
&lt;/pre&gt;

&lt;h2 id=&quot;describe-an-ags-project-and-its-dependencies&quot;&gt;Describe an AGS project and its dependencies&lt;/h2&gt;

&lt;p&gt;To describe an AGS project and its dependencies we naturally use the &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file, specific to the Node.js ecosystem. You can find more information about this file, and how to fill it here : &lt;a href=&quot;https://yarnpkg.com/lang/en/docs/package-json/&quot;&gt;https://yarnpkg.com/lang/en/docs/package-json/&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ApplicationWithCheckForUpdates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Example to implementation of AGS-component-check-for-updates&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AGS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;framework&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AutoIt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.3.14.5&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;v20100v &amp;lt;v20100v@no-reply.com&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;MIT License&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;year&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;private&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;not-yet-git&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@autoit-gui-skeleton/AGS-component-check-for-updates&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finaly to install all the dependencies of a given project, you just have to launch this command:&lt;/p&gt;

&lt;pre class=&quot;command-line&quot; data-prompt=&quot;C: \&amp;gt;MyProject\&quot;&gt;
&lt;code class=&quot; language-bash&quot;&gt;yarn install --modules-folder vendor&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;All project dependencies, as well as daughter dependencies of parent dependencies, are installed in the &lt;code class=&quot;highlighter-rouge&quot;&gt;./vendor/@autoit-gui-skeleton/&lt;/code&gt; directory. If you add AutoIt library in the vendor directory, we recommend wrapping them so that they are also managed by the dependency manager, in the same way as &lt;a href=&quot;https://www.npmjs.com/package/@autoit-gui-skeleton/ags-wrapper-json&quot;&gt;AGS-wrapper-json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install AutoIt dependencies in the &lt;code class=&quot;highlighter-rouge&quot;&gt;./vendor&lt;/code&gt; directory, and not in the default directory of Node.js &lt;code class=&quot;highlighter-rouge&quot;&gt;./node_modules&lt;/code&gt;, you must add the &lt;code class=&quot;highlighter-rouge&quot;&gt;--modules-folder vendor&lt;/code&gt; option. We force this choice to avoid any confusion with a Node.js project. Note that with an AGS project, it is not necessary to explicitly write this option on the command line, thanks to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.yarnrc&lt;/code&gt; file stored at the root of the project, ie in the same place as the&lt;code class=&quot;highlighter-rouge&quot;&gt; package.json&lt;/code&gt; file. Yarn automatically use this file to add an additional configuration of options.&lt;/p&gt;

&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #./.yarnrc 
 --modules-folder vendor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So with this file you can run &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn install&lt;/code&gt; to install the dependencies directly into the appropriate &lt;code class=&quot;highlighter-rouge&quot;&gt;./vendor&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Links related&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/search?q=autoit-gui-skeleton&quot;&gt;View all published AGS package on npmjs.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
            <pubDate>Tue, 10 Jul 2018 00:00:00 +0200</pubDate>
        </item>
        
        <item>
            <title>AGS makes it easy to create Windows installer (setup) for AutoIt applications</title>
            <link>/2018/06/04/autoit-windows-setup.html</link>
            <guid isPermaLink="true">/2018/06/04/autoit-windows-setup.html</guid>
            <description>&lt;blockquote&gt;
  &lt;p&gt;AGS provides a process and some features to facilitate the creation of a Windows setup to an AutoIt application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;ags-features-deployment&quot;&gt;AGS features deployment&lt;/h1&gt;
&lt;p&gt;Here are some new features with the combination of AGS, InnoSetup&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Generate package (archive zip) and Windows setup.&lt;/li&gt;
  &lt;li&gt;Support internationalization (i18n).&lt;/li&gt;
  &lt;li&gt;Check if application is already install.&lt;/li&gt;
  &lt;li&gt;Configure additional messages in the setup like: license agreement, prerequisites and history project.&lt;/li&gt;
  &lt;li&gt;Add icons applciation into Windows start menu.&lt;/li&gt;
  &lt;li&gt;Launch custom command after the end of the installation.&lt;/li&gt;
  &lt;li&gt;Customize and change the graphic elements of the Windows installer (setup).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ags-use-a-windows-batch-to-automate-windows-installer-creation&quot;&gt;AGS use a Windows batch to automate Windows installer creation&lt;/h1&gt;

&lt;p&gt;In AGS we use a Windows batch file which plays the role of orquestrian leader.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://autoit-gui-skeleton.github.io//assets/img/documentation/AGS-package-and-deployment-process.gif&quot; alt=&quot;AGS GUI package and deployment process&quot; class=&quot;img-full img-fancybox&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Read AGS documentation&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://autoit-gui-skeleton.github.io//documentation/creating-setup-package-autoit-application&quot;&gt;Creating installation packages for AutoIt application with AGS&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</description>
            <pubDate>Mon, 04 Jun 2018 00:00:00 +0200</pubDate>
        </item>
        
        <item>
            <title>Publication of AGS on Github</title>
            <link>/2018/05/22/ags-publish-github.html</link>
            <guid isPermaLink="true">/2018/05/22/ags-publish-github.html</guid>
            <description>&lt;p&gt;AutoIt Gui Skeleton (AGS) is now available on &lt;a href=&quot;https://github.com/autoit-gui-skeleton&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;AGS give an environment for developers, that makes it easy to build AutoIt applications. To do that, it proposes to use conventions and a specific organization of code. It also provides tools to help developers in recurring tasks related to software engineering.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://autoit-gui-skeleton.github.io//documentation&quot;&gt;Get started with AGS&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/autoit-gui-skeleton&quot;&gt;View AGS on GitHub&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;
</description>
            <pubDate>Tue, 22 May 2018 00:00:00 +0200</pubDate>
        </item>
        
        <item>
            <title>Github Pages with Jekyll support</title>
            <link>/2018/05/17/thx-github-jekyll.html</link>
            <guid isPermaLink="true">/2018/05/17/thx-github-jekyll.html</guid>
            <description>&lt;blockquote&gt;
  &lt;p&gt;This website is deployed on Github pages, with Jekyll. Thanks to them for this wedding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;what-is-github-pages&quot;&gt;What is GitHub Pages?&lt;/h1&gt;

&lt;p&gt;GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository.&lt;/p&gt;

&lt;p&gt;More information about &lt;a href=&quot;https://help.github.com/articles/what-is-github-pages/&quot;&gt;Github Pages&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-jekyll-&quot;&gt;What is Jekyll ?&lt;/h1&gt;

&lt;p&gt;Jekyll is a simple, blog-aware, static site generator perfect for personal, project, or organization sites. Think of it like a file-based CMS, without all the complexity. Jekyll takes your content, renders Markdown and Liquid templates, and spits out a complete, static website ready to be served by Apache, Nginx or another web server. Jekyll is the engine behind GitHub Pages, which you can use to host sites right from your GitHub repositories.&lt;/p&gt;

&lt;p&gt;More information about &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;github-pages-with-jekyll&quot;&gt;Github Pages with Jekyll&lt;/h1&gt;

&lt;p&gt;For this website we use Jekyll as a static site generator with GitHub Pages. In addition to supporting regular HTML content, GitHub Pages supports Jekyll.&lt;/p&gt;

&lt;p&gt;More information about &lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;Jekyll support on Github Pages&lt;/a&gt;.&lt;/p&gt;
</description>
            <pubDate>Thu, 17 May 2018 00:00:00 +0200</pubDate>
        </item>
        
    </channel>
</rss>