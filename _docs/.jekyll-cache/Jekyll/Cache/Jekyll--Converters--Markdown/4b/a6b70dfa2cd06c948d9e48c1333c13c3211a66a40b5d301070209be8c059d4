I"û<blockquote>
  <p>Pour calculer la taille ; largeur et hauteur ; requise par une chaine de caract√®res, AGS fournit le <em>wrapper</em> <a href="https://www.npmjs.com/package/@autoit-gui-skeleton/ags-wrapper-string-size">@autoit-gui-skeleton/ags-wrapper-string-size</a> de la librairie <a href="https://www.autoitscript.com/forum/topic/114034-stringsize-m23-new-version-16-aug-11/">StringSize.au3</a></p>
</blockquote>

<!--more-->

<h1 id="comment-installer-ags-wrapper-string-size-">Comment installer AGS-wrapper-string-size ?</h1>

<p>On suppose que vous avez d√©j√† install√© <a href="https://nodejs.org/">Node.js</a> et <a href="https://yarnpkg.com/lang/en/">Yarn</a>, par example avec <a href="https://chocolatey.org/">Chocolatey</a>, et pour installer le package AGS-wrapper-json, vous pouvez alors utiliser le gestionnaire de d√©pendances pour AutoIt fournit dans AGS. Il suffit donc de taper dans le dossier racine du projet, o√π le fichier <code class="language-plaintext highlighter-rouge">package.json</code> est stock√©:</p>

<pre class="command-line" data-prompt="C: \&gt;">
<code class=" language-bash">yarn add @autoit-gui-skeleton/ags-wrapper-string-size --modules-folder vendor</code>
</pre>

<p>Toutes les d√©pendances du projet, ainsi que les d√©pendances filles des d√©pedances parentes sont install√©es dans le r√©pertoire <code class="language-plaintext highlighter-rouge">./vendor/@autoit-gui-skeleton/</code>. Pour l‚Äôutiliser dans son programme AutoIt, vous devez inclure cette biblioth√®que avec l‚Äôinstruction:</p>

<pre><code class="language-autoit">#include 'vendor/@autoit-gui-skeleton/ags-wrapper-string-size/StringSize.au3'
</code></pre>

<p>Tous les paquets AGS h√©berg√©s dans le d√©p√¥t npmjs appartiennent √† l‚Äôorganisation <a href="https://www.npmjs.com/search?q=autoit-gui-skeleton">@autoit-gui-skeleton organization</a>. En effet afin de simplifier la gestion des d√©pendances d‚Äôun projet AutoIt construit avec le framework AGS, nous avons d√©tourn√© de son utilisation initiale le gestionnaire de d√©pendance npm, et son √©volution Yarn. Cela nous permet de g√©rer les d√©pendances d‚Äôun projet AGS avec d‚Äôautres biblioth√®ques AutoIt, et de partager ces paquets AutoIt √† partir du r√©f√©rentiel npmjs.org.</p>

<h1 id="stringsize">StringSize</h1>

<h2 id="introduction">Introduction</h2>

<p>La biblioth√®que StringSize prend une cha√Æne de texte et calcule la taille de l‚Äô√©tiquette requise pour la contenir, ainsi que la mise en forme de la cha√Æne pour qu‚Äôelle s‚Äôadapte.</p>

<h2 id="exemples">Exemples</h2>

<h3 id="simple-usage">Simple usage</h3>

<pre><code class="language-autoit">Local $stringSize = _StringSize($text, $fontsize, $fontweight, $fontattribute, $fontfamily, $GUI_width - $marginLeftRight*2)

If(Not @error) Then
      $label_TEXT_reformated = $stringSize[0]
      $label_WIDTH_calculated = $stringSize[2] ; ($stringSize[2] / $dpi)
      $label_HEIGHT_calculated = $stringSize[3] ; ($stringSize[3] / $dpi)
    
      GUISetFont($fontsize, $fontweight, $fontattribute, $fontfamily)
      GUICtrlSetData($label_ID, $label_TEXT_reformated)
      GUICtrlSetPos($label_ID, $marginLeftRight, $top, $label_WIDTH_calculated, $label_HEIGHT_calculated)
EndIf
</code></pre>

<h3 id="reformat√©-une-string-dans-un-label">Reformat√© une string dans un label</h3>

<pre><code class="language-autoit">#include &lt;GUIConstantsEx.au3&gt;
#include "StringSize.au3"

$sText = " I am a very long line and I am not formatted in any way so that I will not fit within the width of the GUI that surrounds me!"

$hGUI = GUICreate("Test", 500, 500)

; A label with no width or height set
GUICtrlCreateLabel($sText, 10, 10)
GUICtrlSetBkColor(-1, 0xFF8080)

; A label with no height set
GUICtrlCreateLabel($sText, 10, 50, 200)
GUICtrlSetBkColor(-1, 0xC0C0FF)

; A label sized by StringSize
$aSize = _StringSize($sText, Default, Default, Default, "", 200)
GUICtrlCreateLabel($aSize[0], 10, 90, $aSize[2], $aSize[3])
GUICtrlSetBkColor(-1, 0x80FF80)

GUISetState()

While 1
    Switch GUIGetMsg()
        Case $GUI_EVENT_CLOSE
            Exit
    EndSwitch
WEnd
</code></pre>

<h3 id="calcul-de-la-plus-grande-taille-de-police-possible-pour-une-largeur-de-label-donn√©">Calcul de la plus grande taille de police possible pour une largeur de label donn√©</h3>

<pre><code class="language-autoit">#include &lt;GUIConstantsEx.au3&gt;

#include "StringSize.au3"

; Declare arrays to hold parameters
Global $aFont[4] = ["Arial", "Tahoma", "Courier New", "Comic Sans MS"]
Global $aWeight[4] = [200, 400, 600, 800]
Global $aAttrib[4] = [0, 2, 4, 0]
Global $aColour[4] = [0xFFFFD0, 0xD0FFD0, 0xD0D0FF, 0xFFD0FF]

$sText = "The UDF will calculate the largest possible font size which will allow this text to fit in the randomly sized label.  " &amp; _
    "Pressing the 'Increase' button will use the next size up so you can see how successful it was.  " &amp; @CRLF &amp; _
    "Note that the UDF is pessimistic and will leave small borders to the right and at the bottom of the text, so you might " &amp; _
    "be able to go one size up in a few cases, although this risks clipping the trailing edges of italic letters or the tails of letters such as 'g'."

$hGUI = GUICreate("Test", 500, 500, 100, 100)

$hButton_Next = GUICtrlCreateButton("Next", 10, 10, 80, 30)
GUICtrlSetResizing(-1, $GUI_DOCKALL)

$hLabel_Size = GUICtrlCreateLabel("", 100, 10, 40, 30)
GUICtrlSetResizing(-1, $GUI_DOCKALL)
GUICtrlSetFont(-1, 24)

$hButton_Increase = GUICtrlCreateButton("Increase", 150, 10, 80, 30)
GUICtrlSetResizing(-1, $GUI_DOCKALL)

GUISetState()

While 1

    ; Choose parameter values

    $iX = 10 * Random(25, 50, 1)
    $iY = 10 * Random(10, 40, 1)
    $sFont = $aFont[Random(0, 3, 1)]
    $iWeight = $aWeight[Random(0, 3, 1)]
    $iAttrib = $aAttrib[Random(0, 3, 1)]
    $iColour = $aColour[Random(0, 3, 1)]

    WinMove($hGUI, "", 100, 100, $iX + 26, $iY + 85)
    $hLabel = GUICtrlCreateLabel("", 10, 50, $iX, $iY)
    GUICtrlSetBkColor(-1, $iColour)

    For $iSize = 5 To 50
        $aSize = _StringSize($sText, $iSize, $iWeight, $iAttrib, $sFont, $iX)
    If $aSize[3] &gt; $iY Then
            $iSize -= 1
            ExitLoop
        EndIf
    Next

    GUICtrlSetData($hLabel_Size, $iSize)
    GUICtrlSetFont($hLabel, $iSize, $iWeight, $iAttrib, $sFont)
    $aSize = _StringSize($sText, $iSize, $iWeight, $iAttrib, $sFont, $iX)
    GUICtrlSetData($hLabel, $aSize[0])

    While 1
        Switch GUIGetMsg()
            Case $GUI_EVENT_CLOSE
                Exit
            Case $hButton_Next
                GUICtrlDelete($hLabel)
                GUICtrlSetData($hLabel_Size, "")
                ExitLoop
            Case $hButton_Increase
                GUICtrlSetData($hLabel, "")
                $iSize += 1
                GUICtrlSetData($hLabel_Size, $iSize)
                GUICtrlSetFont($hLabel, $iSize, $iWeight, $iAttrib, $sFont)
                $aSize = _StringSize($sText, $iSize, $iWeight, $iAttrib, $sFont, $iX)
                GUICtrlSetData($hLabel, $aSize[0])
        EndSwitch
    WEnd

WEnd
</code></pre>

<p><br /></p>

<blockquote>
  <p><strong>Continue reading ?</strong></p>

  <p><a href="https://autoit-gui-skeleton.github.io//fr/documentation/getting-started#dependencies-manager-for-autoit">Dependencies manager for AutoIt</a></p>
</blockquote>

:ET